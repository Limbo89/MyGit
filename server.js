const http = require('http'); //Привязка http библиотеки
const fs = require('fs'); //Привязка fs библиотеки

const hostname = '192.168.30.176'; // IP 
const port = 4000; // порт

const server = http.createServer((req, res) => { //Создание сервера
    let url = req.url; //Переменная в которую заноситься путь
    if (url == '/') { // Условие для перемещения пользователя на главную страницу (не совсем понял)
        url = '/index' // Преобразование путя
    }

    if (url != '/favicon.ico') { // Условие для игнорирования фавиконки (не помню зачем) 

        if (req.url.endsWith('.css')) { // Если окончание файла к которому идет обращение сервера оканчивается на '.css'
            let cssFile = req.url.slice(1); // Создается переменная в которую заноситься файл к которому идет обращение, путем обрезания '/'

            fs.readFile(cssFile, (err, data) => { // Считывание css файла к которому идет обращение.
                if (err) throw err; // Если ошибка, то пропускаем её.

                res.setHeader('Content-Type', 'text/css'); // Установка заголовка с 200 статус кодом для css файлов.
                res.statusCode = 200; // Установка статус кода.
                res.write(data); // Запись содержимого переменной 'data' (в которой содержиться стили css) на сайт.
                res.end() // Окончание отправки данных.
            })
        } else if (req.url.endsWith('.js')) { // Если окончание файла к которому идет обращение сервера оканчивается на '.js'
            let jsFile = req.url.slice(1); // Создается переменная в которую заноситься файл к которому идет обращение, путем обрезания '/'

            fs.readFile(jsFile, (err, data) => { // Считывание css файла к которому идет обращение.
                if (err) throw err; // Если ошибка, то пропускаем её.

                res.setHeader('Content-Type', 'text/javascript'); // Установка заголовка с 200 статус кодом для js файлов.
                res.statusCode = 200; // Установка статус кода.
                res.write(data); // Запись содержимого переменной 'data' (в которой содержиться скрипты js) на сайт.
                res.end() // Окончание отправки данных.
            })
        } else if (req.url.endsWith('.jpg')) { // Если окончание файла к которому идет обращение сервера оканчивается на '.jpg'
            let jsFile = req.url.slice(1); // Создается переменная в которую заноситься файл к которому идет обращение, путем обрезания '/'

            fs.readFile(jsFile, (err, data) => { // Считывание jpg файла к которому идет обращение.
                if (err) throw err; // Если ошибка, то пропускаем её.

                res.setHeader('Content-Type', 'image/jpg'); // Установка заголовка с 200 статус кодом для jpg файлов.
                res.statusCode = 200; // Установка статус кода.
                res.write(data); // Запись содержимого переменной 'data' (в которой содержиться картинка) на сайт.
                res.end() // Окончание отправки данных.
            })
        } else if (req.url.endsWith('.png')) { // Если окончание файла к которому идет обращение сервера оканчивается на '.png'
            let jsFile = req.url.slice(1); // Создается переменная в которую заноситься файл к которому идет обращение, путем обрезания '/'

            fs.readFile(jsFile, (err, data) => { //Считывание png файла к которому идет обращение.
                if (err) throw err; // Если ошибка, то пропускаем её.

                res.setHeader('Content-Type', 'image/png'); // Установка заголовка с 200 статус кодом для png файлов.
                res.statusCode = 200; // Установка статус кода.
                res.write(data); // Запись содержимого переменной 'data' (в которой содержиться картинка) на сайт. 
                res.end() // Окончание отправки данных.
            })
        } else { // Условие шаблонизации
            fs.readFile(url.substr(1, url.length) + '.html', function(err, data) { // Считывание файла игнорируя '/' и добовля '.html' и запуск функции
                if (!err) { // Если функция не выдает ошибку, то
                    res.writeHead(200, { 'Content-Type': 'text/html', }); // Установка заголовка с 200 статус кодом для html файлов.
                    fs.readFile('header.html', function(err, data_header) { // Считывание файла с шапкой и запуск функции которая
                        data = data.toString().replace("{{header}}", data_header.toString()); // Перезаписывает переменную 'data' преобразовывая кодировку в строку и звменяет {{header}} на содержимое 'header.html'
                        console.log(data_header.toString()) // Логирование переменной с данными из шапки

                        fs.readFile('main.html', function(err, data_main) { // Считывание файла с основой и запуск функции которая
                            data = data.toString().replace("{{main}}", data_main.toString()); // Перезаписывает переменную 'data' преобразовывая кодировку в строку и звменяет {{main}} на содержимое 'header.html'
                            console.log(data_main.toString()) // Логирование переменной с данными из основы

                            fs.readFile('footer.html', function(err, data_footer) { // Считывание файла с подвалом и запуск функции которая
                                data = data.toString().replace("{{footer}}", data_footer.toString()); // Перезаписывает переменную 'data' преобразовывая кодировку в строку и звменяет {{footer}} на содержимое 'header.html'
                                res.write(data) // Запись содержимого переменной 'data' (в которой содержиться шапка) на сайт.
                                console.log(data_footer.toString()) // Логирование переменной с данными из подвала
                                console.log('_________________________________________________________________')
                                res.end() // Окончание отправки данных.
                            })
                        })
                    })



                } else { // Если ничего не сработало, то
                    fs.readFile('404.html', function(err, data) { // Считывается файл ошибки 404
                        res.writeHead(400, { 'Content-Type': 'text/html', }); // Установка заголовка с 404 статус кодом для html файлов
                        res.write(data) // Запись содержимого переменной 'data' (в которой содержиться ошибка 404) на сайт.
                        res.end() // Окончание отправки данных.
                    });
                }
            })
        }
    }
});

server.listen(port, hostname, () => { // Прослушка сервера
    console.log('Server is running!') // Лог для обозначения запуска сервера
})