// JSON - формат строки, в котором хранятся какие-либо объекты, (например массивы или ассоциативные массивы), и которые можно спарсить (считать)

// Примеры
// let json_1 = '[0,1,2,3,4,5]';
// let json_2 = '{"name": "Ivan", "surname": "Ivanov", "age": 12}';

// let res1 = JSON.parse(json_1); // parse - парсит строку в объект
// console.log(res1);

// let list = ['one', 'two', 'three'];
// let json_3 = JSON.stringify(list); // stringify - преобразовывать объект в JSON-строку


// COOKIE - это небольшая чейка информации, которая хранится в браузере пользователя.
// document.cookie = '{"name":"Gandalf"}';
// let username = JSON.parse(document.cookie)['name'];
// console.log(document.cookie)

// LOCAL STORAGE (локальное хранилище)
// cookie позволяет хранить всего 4096 символов, а кол-во "кук" на один жомен ограничен от 30 до 50 в зависимости от браузера.

//локальное хранилище позволяет хранить от 5 до 10 мбайт и даже больше

// сохраниние значения
// localStorage.setItem('name', 'Gandalf');

// Получить значение 
// let usrname = localStorage.getItem('name'); // указывается ключ
// alert(usrname)

// удалить значения 
// localStorage.removeItem('name')

// Очистить все
// localStorage.clear()

// БАЗЫ ДАННЫХ
// Сайт с примера БД 
// БД - набор некоторых сведений, хранящихся некоторым упордоченным способом.

// Система управления БД (СУБД) - система, которая позволяет манипулировать информацией в БД 
// с помощью языковых и программных средств. Язык - SQL. СУБД - SQLite, MySQL, PostgreeSQL и т.д.

// SQL (Structured Query Language) - язык стриктурированных запросов. Основная задача - предоставление простого 
// способа считывания и записи информации в БД.

// Плоская БД - EXEL не имеет в своей структуре зависимых отношений (программные не в счет)

// Реляционные БД - это БД, которая состоит из множества таблиц . Основное свойство релционных БД в том, что они зависимы и свзаны между собьй (Отсюда и пошло название relation - отношения)
// Столбцы располонаются в определенном порядке, которые определяются при создании БД.
// В таблице может быть ни одной строки, но должен быть хотя бы 1 столбец!!! 
// У каждого столбца есть уникальное имя (в пределах таблицы), все значения в 1-ом столбце имеют одинаковый тип (тольуо строки, числа, даты и т.д)
// На пересечении столюцов и строк (ячейках) может находится ТОЛЬКО АТОМАРНОЕ (простое) значение. Например, нельзя хранить в ячейках объекты (типа  массивов или словарей), или сложные конструкции (например объект со страницы).

// НОРМАЛИЗАЦИЯ - это по шаговый обратимый процесс замены исходной схемы другой схемой  более логичной и оптимизированной структурой.
// Требуется это дл того, чтобы избавитьс от избыточных данных.

// НФ (Нормальная форма) - это нормализованные данные в таблице по определенным правилам (1-5 НФ, НБФК - Нормальна форма Бойса-Кодда)

// Таблица находится в 1 нормальной форме, если все её поля имеют простые значения (атомарные)
// первым делом при, составляя БД, проверьте, что в таблице нет массивов и словарей!

// Таблица находится в 2 нормальной форме, если в таблице присутствует хотя бы 1 ключевой столбец (такой столбец называют Primary Key, главный, или первичный ключ), значение которого не повторяются более 1-го раза (уникальные)
// Ключевые поля могут быть как естественными (то есть строковыми или числеными, например логины), либо суррогатными (исскуствеными).

// id - это исскуственный(суррогатный) ключ, который назначается програмно. Используют как правило AUTOINCREMENT NUMBER (авто прибавление по единичке)

// PRIMARY KEY вляется уникальным в пределах одной таблицы
// лучше использовать либо числовые естественные числовые ключи (целочисленные), либо исскуственные, по причине более быстрого считывания СУБД.

// - Остальные поля должны зависеть от главного ключа.
// - ключи в таблицах могут быть составными. В таком случае, если поле наследуется из другой таблицы, его называют ВНЕШНИМ (foregin key)

// - внешние ключи могут быть сами по себе в том чисое, для хранения информации о записи.

// Таблица находится в 3 нормальной форме, если 

// Таблица находится в 4 нормальной форме, если 

// Таблица находится в 5 нормальной форме, если 

// Таблица находится в 6 нормальной форме, если 

// Таблица находится в 7 нормальной форме, если 

